/*
 * Copyright (C) 2014 Pavel Stastny
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

/*
plugins {
    id 'com.gradle.build-scan' version '1.0'
}


buildScan {
    licenseAgreementUrl = 'https://gradle.com/terms-of-service'
    licenseAgree = 'yes'
}
*/

println "Building K4-K5; please read BUILD-README.txt"

apply plugin: 'java' // -> generate javadoc

configurations {
    /**
     * Contains external editors
     */
    editors {
        transitive = false
    }
}


configurations.all {
    exclude module: 'slf4j-log4j12'
}


dependencies {
    // editor dependency
    editors group: "cz.incad.kramerius", name: "editor", version: "5.1.1", ext: "war"
    // rightseditor dependency
    editors group: "cz.incad.kramerius", name: "rightseditor", version: "5.1.1", ext: "war"
}



repositories {
    mavenLocal()
}

allprojects {
    group = 'cz.incad.kramerius'
    version = '5.8.4.5'
}

/**
 * Inject to all subprojects 
 */
subprojects {

    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'maven'

    compileJava.options.encoding = 'UTF-8'


    ext.guiceversion = '3.0'
    //ext.postgresversion = '8.4-702.jdbc4'
    ext.postgresversion = '42.2.5'

    ext.slf4jversion = '1.7.28'
    ext.jerseyversion = '1.19.4'

    ext.generatedSources = "generated-sources"



    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    dependencies {

        // postgresql to all subprojects
        //compile "postgresql:postgresql:${postgresversion}"
        compile "org.postgresql:postgresql:${postgresversion}"

        // guice to all subprojects
        compile "com.google.inject:guice:${guiceversion}"
        compile "com.google.inject.extensions:guice-multibindings:${guiceversion}"
        compile "com.google.inject.extensions:guice-multibindings:${guiceversion}"
        compile "com.google.inject.extensions:guice-servlet:${guiceversion}"
        compile "com.google.inject.extensions:guice-assistedinject:${guiceversion}"
        compile "javax.inject:javax.inject:1"

        //JAXB
        compile "javax.xml.bind:jaxb-api:2.3.1"
        compile "com.sun.xml.bind:jaxb-impl:2.3.1"
        compile "javax.activation:activation:1.1"

        // logging
        compile "org.slf4j:slf4j-api:${slf4jversion}"
        compile "org.slf4j:log4j-over-slf4j:${slf4jversion}"
        compile "org.slf4j:slf4j-jdk14:${slf4jversion}"
        compile "org.slf4j:jcl-over-slf4j:${slf4jversion}"

        //junit to all subprojects
        testCompile "junit:junit:4.4"
        testCompile "org.easymock:easymock:3.0"

    }

    repositories {



//        maven {
//            url "http://kramerius.googlecode.com/svn/mvnrepo"
//        }
//
//        maven {
//            url "http://aplikator.googlecode.com/svn/mvnrepository"
//        }


        mavenLocal()
        mavenCentral()


		// disabled duraspace repo 
		/*
        maven {
            url "http://m2.duraspace.org/content/repositories/releases"
        }
		*/

        maven {
            url "https://maven.java.net/content/repositories/snapshots/"
        }

        maven {
            url "http://guiceyfruit.googlecode.com/svn/repo/releases/"
        }


        maven {
            url "http://jsdoctk-plugin.googlecode.com/svn/repo"
        }

        maven {
            url "http://repository.springsource.com/maven/bundles/external"
        }

        maven {
            url "https://repository.jboss.org/nexus/content/repositories/thirdparty-releases"
        }

        maven {
            url "http://download.osgeo.org/webdav/geotools/"
        }

//        maven {
//            url "http://repo.jfrog.org/artifactory/libs-releases/"
//        }

        /*
        maven {
            url "https://maven.atlassian.com/content/groups/public"
        }*/

        maven {
            url "http://jbig2-imageio.googlecode.com/svn/maven-repository"
        }

        /*
        maven {
            url "http://download.java.net/maven/2/"
        }*/

        flatDir {
            dirs '../buildSrc/lib'
        }

    }

    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }

    //~ overwrite windows encoding
    test {
        systemProperty "file.encoding", "utf-8"
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
        options.fork = true

        // if there JDK6_HOME path defined; use it
        if (System.env.JDK6_HOME != null) {
            options.bootClasspath = "$System.env.JDK6_HOME/jre/lib/rt.jar"
            options.bootClasspath += "$File.pathSeparator$System.env.JDK6_HOME/jre/lib/jsse.jar"
            // if there JDK7_HOME path defined; use it
        } else if (System.env.JDK7_HOME != null) {
            options.bootClasspath = "$System.env.JDK7_HOME/jre/lib/rt.jar"
            options.bootClasspath += "$File.pathSeparator$System.env.JDK7_HOME/jre/lib/jsse.jar"
        }
    }

    // ~ overwritten windows encoding

    // remove all dependencies without group id
    install.repositories.mavenInstaller.pom.whenConfigured { pom ->
        pom.dependencies.removeAll { it.groupId == null || it.groupId.equals("") }
    }
}

/**
 * Distribution task; zipInstallDir first
 */
task distZip(type: Zip, dependsOn: 'zipInstallDir') {
    description "Create full distribution zip"
    baseName "kramerius"
    group "Distribution"
    from { 'search/build/libs' }
    from { 'security-core/build/libs' }
    from configurations.editors
    from { 'build/installation' }
    from 'build/distributions/kramerius-javadoc.zip'
    eachFile {
        it.path = it.path.replace('-5.1.1.war', '.war')
        it.path = it.path.replace('-5.1.0.war', '.war')
    }
}

task distZipWOEditors(type: Zip, dependsOn: 'zipInstallDir') {
    description "Create  distributions zip without editors"
    baseName "kramerius"
    group "Distribution"
    from { 'search/build/libs' }
    from { 'security-core/build/libs' }
    from { 'build/installation' }
}

/**
 * Patch distribution task
 */
task distPatchZip(type: Zip) {
    description "Create patch distribution zip"
    baseName "kramerius-patch"
    group "Distribution"
    from { 'search/build/libs' }
    from { 'security-core/build/libs' }
}

// zip installaton directory
task zipInstallDir(type: Zip) {
    description "Create zip from installation directory"
    baseName "installation"
    from "installation"
    destinationDir file('build/installation')
}

// disabled distributions
task zipAllJavadocs(type: Zip) {
    String[] _spr = ["common", "fedora-api", "security-core", "rest", "search"];
    description "create javadocs for ${_spr} and zip it"
    baseName "kramerius-javadoc"
    for (String project in _spr) {
        dependsOn(":${project}:javadoc")
        into(project) {
            from(tasks.getByPath(":${project}:javadoc").destinationDir)
        }

    }
}



